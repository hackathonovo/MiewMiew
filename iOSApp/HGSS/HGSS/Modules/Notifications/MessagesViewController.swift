//
//  MessagesViewController.swift
//  HGSS
//
//  Created by Nikola Majcen on 21/05/2017.
//  Copyright (c) 2017 Nikola Majcen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import JSQMessagesViewController
import Wrap
import Unbox
import FontAwesome_swift

final class MessagesViewController: JSQMessagesViewController {
    
    // MARK: - Public properties -
    
    var presenter: MessagesPresenterInterface!
    
    // MARK: - Private properties -
    
    fileprivate var _socketManager: SocketObserver = SocketManager.shared
    fileprivate var _messages: [JSQMessage] = []
    
    lazy var _outgoingBubbleImageView: JSQMessagesBubbleImage = self._setupOutgoingBubble()
    lazy var _incomingBubbleImageView: JSQMessagesBubbleImage = self._setupIncomingBubble()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.senderId = UserDefaults.standard.value(forKey: Constants.UserDefaults.userId) as! String
        self.senderDisplayName = UserDefaults.standard.value(forKey: Constants.UserDefaults.username) as! String
        
        _setupNavigationBar()
        _setupMessagingView()
        _socketManager.subscribe(subscriber: self)
    }
    
    func didSelectedClose() {
        presenter.didSelectedClose()
    }
    
    // MARK: - Messages configuration
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return _messages.count
    }
    
    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -> JSQMessageData! {
        return _messages[indexPath.row]
    }
    
    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -> JSQMessageBubbleImageDataSource! {
        let message = _messages[indexPath.item]
        if message.senderId == senderId {
            return _outgoingBubbleImageView
        } else {
            return _incomingBubbleImageView
        }
    }
    
    override func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -> JSQMessageAvatarImageDataSource! {
        return nil
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = super.collectionView(collectionView, cellForItemAt: indexPath) as! JSQMessagesCollectionViewCell
        let message = _messages[indexPath.item]
        
        if message.senderId == senderId {
            cell.textView?.textColor = UIColor.white
        } else {
            cell.textView?.textColor = UIColor.black
        }
        return cell
    }
    
    private func _setupOutgoingBubble() -> JSQMessagesBubbleImage {
        let bubbleImageFactory = JSQMessagesBubbleImageFactory()
        return bubbleImageFactory!.outgoingMessagesBubbleImage(with: UIColor.flatSkyBlueDark)
    }
    
    private func _setupIncomingBubble() -> JSQMessagesBubbleImage {
        let bubbleImageFactory = JSQMessagesBubbleImageFactory()
        return bubbleImageFactory!.incomingMessagesBubbleImage(with: UIColor.flatWhite)
    }
    
    // MARK: - Messages actions
    
    override func didPressSend(_ button: UIButton!, withMessageText text: String!, senderId: String!, senderDisplayName: String!, date: Date!) {
        guard let message = JSQMessage(senderId: senderId, senderDisplayName: senderDisplayName, date: Date(), text: text) else { return }
        
        _socketManager.send(message: text!)
        _messages.append(message)
        
        finishSendingMessage()
        JSQSystemSoundPlayer.jsq_playMessageSentSound()
    }
    
    // MARK: - Private methods
    
    fileprivate func _setupNavigationBar() {
        let image = UIImage.fontAwesomeIcon(name: .close, textColor: UIColor.blue, size: CGSize(width: 32, height: 32))
        navigationItem.leftBarButtonItem = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(didSelectedClose))
        navigationItem.title = "Messages"
    }
    
    func connect() {
        if _socketManager.isConnected() {
            _socketManager.disconnect()
        } else {
            _socketManager.connect()
        }
    }
    
    fileprivate func _setupMessagingView() {
        collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero
        collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero
        collectionView!.collectionViewLayout.messageBubbleFont = UIFont.font(name: .latoRegular, size: 15)
        let sendString = NSAttributedString(string: "Send",
                                            attributes: [NSFontAttributeName: UIFont.font(name: .latoBold, size: 17)])
        inputToolbar.contentView.rightBarButtonItem.setAttributedTitle(sendString, for: .normal)
        inputToolbar.contentView.textView.font = UIFont.font(name: .latoRegular, size: 15)
        inputToolbar.contentView.leftBarButtonItem.isHidden = true
    }
}

// MARK: - Extensions -

extension MessagesViewController: MessagesViewInterface {
}

extension MessagesViewController: SocketMessageClient {
    
    func didConnect() {
        navigationItem.rightBarButtonItem?.tintColor = UIColor.flatGreen
    }
    
    func didDisconnect() {
        navigationItem.rightBarButtonItem?.tintColor = UIColor.flatRed
    }
    
    func didReceive(message: String) {
        guard let _message = JSQMessage(senderId: "generic-id", displayName: "", text: message) else { return }
        _messages.append(_message)
        finishReceivingMessage()
        JSQSystemSoundPlayer.jsq_playMessageReceivedSound()
        
    }
    
    func didReceive(location: CLLocation, from user: String, userId: String, username: String) {
        print(location)
        finishReceivingMessage()
        JSQSystemSoundPlayer.jsq_playMessageReceivedSound()
    }
}
