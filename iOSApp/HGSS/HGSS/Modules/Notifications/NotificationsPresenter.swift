//
//  NotificationsPresenter.swift
//  HGSS
//
//  Created by Nikola Majcen on 21/05/2017.
//  Copyright (c) 2017 Nikola Majcen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class NotificationsPresenter {

    // MARK: - Private properties -

    fileprivate weak var _view: NotificationsViewInterface?
    fileprivate var _interactor: NotificationsInteractorInterface
    fileprivate var _wireframe: NotificationsWireframeInterface
    
    fileprivate var _requests: [RescueRequest] = []
    
    // MARK: - Lifecycle -

    init(wireframe: NotificationsWireframeInterface, view: NotificationsViewInterface, interactor: NotificationsInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }

}

// MARK: - Extensions -

extension NotificationsPresenter: NotificationsPresenterInterface {
    
    func viewWillAppear(animated: Bool) {
        _interactor.fetchRequests(with: UserDefaults.standard.value(forKey: Constants.UserDefaults.userId) as! String) { [weak self] (result) in
            switch result {
            case .success(let requests):
                if requests.isEmpty {
                    self?._view?.showPlaceholder()
                } else {
                    self?._view?.hidePlaceholder()
                }
                self?._requests = requests
                self?._view?.reloadView()
            case .failure(let error):
                self?._view?.showPlaceholder()
                self?._wireframe.showAlert(with: error.localizedDescription, with: nil)
            }
        }
    }
    
    func numberOfItems() -> Int {
        return _requests.count
    }
    
    func item(at indexPath: IndexPath) -> RescueRequest {
        return _requests[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        
    }
    
    func didSelectedMessages() {
        _wireframe.navigate(to: .messaging)
    }
}
