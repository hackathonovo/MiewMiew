/*
 * Created on 20 svi 2017 ( Time 15:57:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package hr.miewmiew.MiewMiew.dbmodel.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "Specijalnosti"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="Specijalnosti", schema="dbo", catalog="HackatonIn2" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="SpecijalnostiEntity.countAll", query="SELECT COUNT(x) FROM SpecijalnostiEntity x" )
} )
public class SpecijalnostiEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="Id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="Naziv")
    private String     naziv        ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="specijalnosti", targetEntity=SpecijalnostivrstaspasavanjaEntity.class)
    private List<SpecijalnostivrstaspasavanjaEntity> listOfSpecijalnostivrstaspasavanja;

    @OneToMany(mappedBy="specijalnosti", targetEntity=VjestinekorisnikaEntity.class)
    private List<VjestinekorisnikaEntity> listOfVjestinekorisnika;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public SpecijalnostiEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : Naziv ( nvarchar ) 
    public void setNaziv( String naziv ) {
        this.naziv = naziv;
    }
    public String getNaziv() {
        return this.naziv;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfSpecijalnostivrstaspasavanja( List<SpecijalnostivrstaspasavanjaEntity> listOfSpecijalnostivrstaspasavanja ) {
        this.listOfSpecijalnostivrstaspasavanja = listOfSpecijalnostivrstaspasavanja;
    }
    public List<SpecijalnostivrstaspasavanjaEntity> getListOfSpecijalnostivrstaspasavanja() {
        return this.listOfSpecijalnostivrstaspasavanja;
    }

    public void setListOfVjestinekorisnika( List<VjestinekorisnikaEntity> listOfVjestinekorisnika ) {
        this.listOfVjestinekorisnika = listOfVjestinekorisnika;
    }
    public List<VjestinekorisnikaEntity> getListOfVjestinekorisnika() {
        return this.listOfVjestinekorisnika;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(naziv);
        return sb.toString(); 
    } 

}
